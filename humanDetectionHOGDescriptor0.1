import cv2
import imutils
from djitellopy import tello
import KeyPressModule as kp
from time import sleep
import time

kp.init()
me = tello.Tello()
me.connect()
print(me.get_battery())
global img
me.stream_on()


def getKeyboardInput():
    lr, fb, ud, yv = 0, 0, 0, 0
    speed = 50
    if kp.getKey("LEFT"): lr = -speed
    elif kp.getKey("RIGHT"): lr = speed

    if kp.getKey("DOWN"): fb = -speed
    elif kp.getKey("UP"): fb = speed

    if kp.getKey("w"): ud = speed
    elif kp.getKey("s"): ud = -speed

    if kp.getKey("a"): yv = -speed
    elif kp.getKey("d"): yv = speed

    if kp.getKey("q"): yv = me.land(); time.sleep(3)
    if kp.getKey("e"): me.takeoff()
    #when z pressed picture is taken and saved to file
    if kp.getKey("z"):
        cv2.imwrite(f'Resources/Images/{time.time()}.jpg', img)
        time.sleep(0.3)
    return [lr, fb, ud, yv]

# Initializing the HOG person detector that is part of the cv2 library
hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

#while not landed
while (kp.getKey("q")) == False:
    vals = getKeyboardInput()
    me.send_rc_control(vals[0], vals[1], vals[2], vals[3])
    img = me.get_frame_read().frame
    img = imutils.resize(img, width=min(400, image.shape[1]))
    # Detecting the regions with pedestrians inside it
    (regions, _) = hog.detectMultiScale(image, winStride=(4, 4), padding=(4, 4), scale=1.05)
    # Drawing regions
    for (x, y, w, h) in regions:
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 2)
    cv2.imshow("Img", img)
    cv2.waitKey(1)
    
cv2.destroyAllWindows()
